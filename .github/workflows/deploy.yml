name: CI and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # 최신 버전으로 업데이트

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2  # 최신 버전으로 업데이트

    - name: Login to DockerHub
      uses: docker/login-action@v2  # 최신 버전으로 업데이트
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
      run: |
        docker build -t $DOCKER_USERNAME/$DOCKER_IMAGE_NAME .
        docker push $DOCKER_USERNAME/$DOCKER_IMAGE_NAME

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # 최신 버전으로 업데이트

    - name: Debug Secrets
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}"
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}"
        echo "AWS_THUMBNAIL_BUCKET_NAME=${{ secrets.AWS_THUMBNAIL_BUCKET_NAME }}"
        echo "AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }}"
        echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}"
        echo "AWS_CLOUDFRONT_URL=${{ secrets.AWS_CLOUDFRONT_URL }}"
        echo "DB_NAME=${{ secrets.DB_NAME }}"
        echo "DB_USER=${{ secrets.DB_USER }}"
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
        echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}"

    - name: Create .env file
      run: |
        set -e  # 오류 발생 시 스크립트 종료
        touch .env
        echo "Touched .env file" >> debug.log
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
        echo "Added AWS_ACCESS_KEY_ID" >> debug.log
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
        echo "Added AWS_SECRET_ACCESS_KEY" >> debug.log
        echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}" >> .env
        echo "Added AWS_STORAGE_BUCKET_NAME" >> debug.log
        echo "AWS_THUMBNAIL_BUCKET_NAME=${{ secrets.AWS_THUMBNAIL_BUCKET_NAME }}" >> .env
        echo "Added AWS_THUMBNAIL_BUCKET_NAME" >> debug.log
        echo "AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }}" >> .env
        echo "Added AWS_S3_REGION_NAME" >> debug.log
        echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
        echo "Added ALLOWED_HOSTS" >> debug.log
        echo "AWS_CLOUDFRONT_URL=${{ secrets.AWS_CLOUDFRONT_URL }}" >> .env
        echo "Added AWS_CLOUDFRONT_URL" >> debug.log
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "Added DB_NAME" >> debug.log
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "Added DB_USER" >> debug.log
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "Added DB_PASSWORD" >> debug.log
        echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env
        echo "Added DB_ROOT_PASSWORD" >> debug.log
        cat .env  # 디버깅용으로 .env 파일 내용을 출력
        cat debug.log  # 디버깅용으로 로그 파일 내용을 출력
        ls -al  # 디버깅용으로 현재 디렉토리 내용을 출력
        echo "Finished creating .env file"

    - name: Install Docker on EC2
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        AWS_EC2_IP: ${{ secrets.AWS_EC2_IP }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $AWS_EC2_IP >> ~/.ssh/known_hosts
        ssh $SSH_USERNAME@$AWS_EC2_IP <<EOF
          set -e
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo \
            "deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            \$(. /etc/os-release && echo "\$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        EOF

    - name: Deploy to EC2
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        AWS_EC2_IP: ${{ secrets.AWS_EC2_IP }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $AWS_EC2_IP >> ~/.ssh/known_hosts

        # 현재 디렉터리의 내용을 나열하여 디버깅
        ls -al 

        # .env 파일이 존재하는지 확인
        if [ -f .env ]; then
          echo ".env 파일이 현재 디렉터리에 존재합니다."
        else
          echo ".env 파일이 현재 디렉터리에 존재하지 않습니다."
          exit 1  # .env 파일이 없으면 오류와 함께 종료
        fi

        ssh $SSH_USERNAME@$AWS_EC2_IP 'mkdir -p ~/app'

        # .env 파일을 명시적으로 복사
        scp .env $SSH_USERNAME@$AWS_EC2_IP:~/app/.env  

        # 모든 파일을 EC2 인스턴스로 복사
        scp -r ./* $SSH_USERNAME@$AWS_EC2_IP:~/app

        ssh $SSH_USERNAME@$AWS_EC2_IP <<EOF
          cd ~/app
          ls -al  # 디버깅을 위해 현재 디렉터리 내용을 나열
          if [ -f .env ]; then
            echo $(cat .env)  # 디버깅을 위해 .env 파일 내용을 출력
          else
            echo ".env 파일을 찾을 수 없습니다."
          fi
          sudo docker compose down
          sudo docker compose up -d --build
        EOF
